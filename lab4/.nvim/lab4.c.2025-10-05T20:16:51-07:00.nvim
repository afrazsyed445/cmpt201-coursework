#define _GNU_SOURCE
#include <unistd.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>

#define BUF_SIZE 256

struct header {
    uint64_t size;
    struct header* next;
};

static void handle_error(const char *what) {
    char buf[BUF_SIZE];
    int n = snprintf(buf, sizeof(buf), "Error: %s (errno=%d)\n", what, errno);
    if (n > 0) write(STDERR_FILENO, buf, (size_t)n);
    _exit(1);
}

static void print_out(const char *format, void *data, size_t data_size) {
    char buf[BUF_SIZE];
    ssize_t len = snprintf(buf, BUF_SIZE, format,
        data_size == sizeof(uint64_t) ? *(uint64_t *)data : *(void **)data);
    if (len < 0) handle_error("snprintf");
    write(STDOUT_FILENO, buf, (size_t)len);
}

static void print_u8_line(uint8_t v) {
    char out[4];
    int n = snprintf(out, sizeof(out), "%u\n", (unsigned)v);
    if (n > 0) write(STDOUT_FILENO, out, (size_t)n);
}

int main(void) {
    const uint64_t HEAP_ADD = 256;
    const uint64_t BLOCK_SZ = 128;
    const uint64_t HDR_SZ   = (uint64_t)sizeof(struct header);
    const uint64_t DATA_SZ  = BLOCK_SZ - HDR_SZ;

    void *base = sbrk((intptr_t)HEAP_ADD);
    if (base == (void*)-1) handle_error("sbrk");

    void *block1_addr = base;
    void *block2_addr = (void *)((char *)base + 128);

    struct header *h1 = (struct header *)block1_addr;
    struct header *h2 = (struct header *)block2_addr;

    h1->size = BLOCK_SZ;
    h1->next = NULL;
    h2->size = BLOCK_SZ;
    h2->next = h1;

    void *p;
    p = block1_addr;
    print_out("first block:       %p\n", &p, sizeof(p));
    p = block2_addr;
    print_out("second block:      %p\n", &p, sizeof(p));
    print_out("first block size:  %lu\n", &h1->size, sizeof(uint64_t));
    p = h1->next;
    print_out("first block next:  %p\n", &p, sizeof(p));
    print_out("second block size: %lu\n", &h2->size, sizeof(uint64_t));
    p = h2->next;
    print_out("second block next: %p\n", &p, sizeof(p));

    uint8_t *data1 = (uint8_t *)((char *)block1_addr + HDR_SZ);
    uint8_t *data2 = (uint8_t *)((char *)block2_addr + HDR_SZ);
    memset(data1, 0x00, (size_t)DATA_SZ);
    memset(data2, 0x01, (size_t)DATA_SZ);

    print_out("first block size:  %lu\n", &h1->size, sizeof(uint64_t));
    p = h1->next;
    print_out("first block next:  %p\n", &p, sizeof(p));
    print_out("second block size: %lu\n", &h2->size, sizeof(uint64_t));
    p = h2->next;
    print_out("second block next: %p\n", &p, sizeof(p));

    for (uint64_t i = 0; i < DATA_SZ; i++) print_u8_line(data1[i]);
    for (uint64_t i = 0; i < DATA_SZ; i++) print_u8_line(data2[i]);

    return 0;
}

